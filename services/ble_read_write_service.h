/* This file was generated by plugin 'Nordic Semiconductor nRF5x v.1.2.2' (BDS version 1.0.2116.0) */

#ifndef BLE_READ_WRITE_SERVICE_H__
#define BLE_READ_WRITE_SERVICE_H__

#include <stdint.h>
#include <stdbool.h>
#include "ble.h"
#include "ble_srv_common.h"
#include "app_util_bds.h"



/**@brief Read Write Service event type. */
typedef enum
{ 
    BLE_READ_WRITE_SERVICE_READ_EVT_NOTIFICATION_ENABLED,  /**< Read value notification enabled event. */
    BLE_READ_WRITE_SERVICE_READ_EVT_NOTIFICATION_DISABLED, /**< Read value notification disabled event. */
    BLE_READ_WRITE_SERVICE_WRITE_EVT_NOTIFICATION_ENABLED,  /**< Write value notification enabled event. */
    BLE_READ_WRITE_SERVICE_WRITE_EVT_NOTIFICATION_DISABLED, /**< Write value notification disabled event. */
    BLE_READ_WRITE_SERVICE_WRITE_EVT_WRITE, /**< Write write event. */
    BLE_READ_WRITE_SERVICE_WWR_EVT_NOTIFICATION_ENABLED,  /**< WwR value notification enabled event. */
    BLE_READ_WRITE_SERVICE_WWR_EVT_NOTIFICATION_DISABLED, /**< WwR value notification disabled event. */
    BLE_READ_WRITE_SERVICE_WWR_EVT_WRITE, /**< WwR write event. */
    BLE_READ_WRITE_SERVICE_NOTIFY_EVT_NOTIFICATION_ENABLED,  /**< Notify value notification enabled event. */
    BLE_READ_WRITE_SERVICE_NOTIFY_EVT_NOTIFICATION_DISABLED, /**< Notify value notification disabled event. */
    BLE_READ_WRITE_SERVICE_NOTIFY_EVT_CCCD_WRITE, /**< Notify CCCD write event. */
    BLE_READ_WRITE_SERVICE_INDICATE_EVT_NOTIFICATION_ENABLED,  /**< Indicate value notification enabled event. */
    BLE_READ_WRITE_SERVICE_INDICATE_EVT_NOTIFICATION_DISABLED, /**< Indicate value notification disabled event. */
    BLE_READ_WRITE_SERVICE_INDICATE_EVT_CCCD_WRITE, /**< Indicate CCCD write event. */
} ble_read_write_service_evt_type_t;

// Forward declaration of the ble_read_write_service_t type.
typedef struct ble_read_write_service_s ble_read_write_service_t;








/**@brief Read structure. */
typedef struct
{
    uint8_array_t data;
} ble_read_write_service_read_t;
/**@brief Write structure. */
typedef struct
{
    uint8_array_t data;
} ble_read_write_service_write_t;
/**@brief WwR structure. */
typedef struct
{
    uint8_array_t data;
} ble_read_write_service_wwr_t;
/**@brief Notify structure. */
typedef struct
{
    uint8_array_t data;
} ble_read_write_service_notify_t;
/**@brief Indicate structure. */
typedef struct
{
    uint8_array_t data;
} ble_read_write_service_indicate_t;

/**@brief Read Write Service Service event. */
typedef struct
{
    ble_read_write_service_evt_type_t evt_type;    /**< Type of event. */
    union {
        uint16_t cccd_value; /**< Holds decoded data in Notify and Indicate event handler. */
        ble_read_write_service_write_t write; /**< Holds decoded data in Write event handler. */
        ble_read_write_service_wwr_t wwr; /**< Holds decoded data in Write event handler. */
    } params;
} ble_read_write_service_evt_t;

/**@brief Read Write Service Service event handler type. */
typedef void (*ble_read_write_service_evt_handler_t) (ble_read_write_service_t * p_read_write_service, ble_read_write_service_evt_t * p_evt);

/**@brief Read Write Service Service init structure. This contains all options and data needed for initialization of the service */
typedef struct
{
    ble_read_write_service_evt_handler_t     evt_handler; /**< Event handler to be called for handling events in the Read Write Service Service. */
    ble_read_write_service_read_t ble_read_write_service_read_initial_value; /**< If not NULL, initial value of the Read characteristic. */ 
    ble_read_write_service_write_t ble_read_write_service_write_initial_value; /**< If not NULL, initial value of the Write characteristic. */ 
    ble_read_write_service_wwr_t ble_read_write_service_wwr_initial_value; /**< If not NULL, initial value of the WwR characteristic. */ 
    ble_read_write_service_notify_t ble_read_write_service_notify_initial_value; /**< If not NULL, initial value of the Notify characteristic. */ 
    ble_read_write_service_indicate_t ble_read_write_service_indicate_initial_value; /**< If not NULL, initial value of the Indicate characteristic. */ 
} ble_read_write_service_init_t;

/**@brief Read Write Service Service structure. This contains various status information for the service.*/
struct ble_read_write_service_s
{
    ble_read_write_service_evt_handler_t evt_handler; /**< Event handler to be called for handling events in the Read Write Service Service. */
    uint16_t service_handle; /**< Handle of Read Write Service Service (as provided by the BLE stack). */
    ble_gatts_char_handles_t read_handles; /**< Handles related to the Read characteristic. */
    ble_gatts_char_handles_t write_handles; /**< Handles related to the Write characteristic. */
    ble_gatts_char_handles_t wwr_handles; /**< Handles related to the WwR characteristic. */
    ble_gatts_char_handles_t notify_handles; /**< Handles related to the Notify characteristic. */
    ble_gatts_char_handles_t indicate_handles; /**< Handles related to the Indicate characteristic. */
    uint16_t conn_handle; /**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). */
};

/**@brief Function for initializing the Read Write Service.
 *
 * @param[out]  p_read_write_service       Read Write Service Service structure. This structure will have to be supplied by
 *                          the application. It will be initialized by this function, and will later
 *                          be used to identify this particular service instance.
 * @param[in]   p_read_write_service_init  Information needed to initialize the service.
 *
 * @return      NRF_SUCCESS on successful initialization of service, otherwise an error code.
 */
uint32_t ble_read_write_service_init(ble_read_write_service_t * p_read_write_service, const ble_read_write_service_init_t * p_read_write_service_init);

/**@brief Function for handling the Application's BLE Stack events.*/
void ble_read_write_service_on_ble_evt(ble_read_write_service_t * p_read_write_service, ble_evt_t * p_ble_evt);

/**@brief Function for setting the Read.
 *
 * @details Sets a new value of the Read characteristic. The new value will be sent
 *          to the client the next time the client reads the Read characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_read_write_service                 Read Write Service Service structure.
 * @param[in]   p_read  New Read.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_read_write_service_read_set(ble_read_write_service_t * p_read_write_service, ble_read_write_service_read_t * p_read);

/**@brief Function for setting the Notify.
 *
 * @details Sets a new value of the Notify characteristic. The new value will be sent
 *          to the client the next time the client reads the Notify characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_read_write_service                 Read Write Service Service structure.
 * @param[in]   p_notify  New Notify.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_read_write_service_notify_set(ble_read_write_service_t * p_read_write_service, ble_read_write_service_notify_t * p_notify);

/**@brief Function for sending the Notify.
 *
 * @details The application calls this function after having performed a notify.
 *          The notify data is encoded and sent to the client.
 *          This function is only generated if the characteristic's Notify or Indicate property is not 'Excluded'.
 *
 * @param[in]   p_read_write_service                    Read Write Service Service structure.
 * @param[in]   p_notify               New notify.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_read_write_service_notify_send(ble_read_write_service_t * p_read_write_service, ble_read_write_service_notify_t * p_notify);

/**@brief Function for setting the Indicate.
 *
 * @details Sets a new value of the Indicate characteristic. The new value will be sent
 *          to the client the next time the client reads the Indicate characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_read_write_service                 Read Write Service Service structure.
 * @param[in]   p_indicate  New Indicate.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_read_write_service_indicate_set(ble_read_write_service_t * p_read_write_service, ble_read_write_service_indicate_t * p_indicate);

/**@brief Function for sending the Indicate.
 *
 * @details The application calls this function after having performed a indicate.
 *          The indicate data is encoded and sent to the client.
 *          This function is only generated if the characteristic's Notify or Indicate property is not 'Excluded'.
 *
 * @param[in]   p_read_write_service                    Read Write Service Service structure.
 * @param[in]   p_indicate               New indicate.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_read_write_service_indicate_send(ble_read_write_service_t * p_read_write_service, ble_read_write_service_indicate_t * p_indicate);

#endif //_BLE_READ_WRITE_SERVICE_H__
